import { NextRequest, NextResponse } from 'next/server'
import { openai, systemPrompt } from '@/lib/openai'

export async function POST(request: NextRequest) {
  try {
    const { message, history, analysisData, detectedIntent } = await request.json()

    if (!message) {
      return NextResponse.json(
        { error: 'Message is required' },
        { status: 400 }
      )
    }

    let enhancedMessage = message
    if (analysisData) {
      // Dynamic templates based on detected intent
      const templates = {
        descriptive_analysis: {
          level: 'AN√ÅLISE DESCRITIVA DOS DADOS ATUAIS',
          instruction: 'Examine os dados fornecidos e descreva a situa√ß√£o atual. Foque em COMO OS DADOS EST√ÉO organizados, distribu√≠dos e segmentados. Use n√∫meros espec√≠ficos dos dados reais.',
          chainOfThought: '1) Primeiro examine todos os dados 2) Identifique padr√µes e distribui√ß√µes 3) Descreva a situa√ß√£o atual com n√∫meros espec√≠ficos'
        },
        specific_data: {
          level: 'RESPOSTA DIRETA E CONCISA',
          instruction: 'Extraia e forne√ßa o n√∫mero/dado espec√≠fico solicitado. Seja direto e objetivo.',
          chainOfThought: '1) Identifique exatamente qual dado √© solicitado 2) Extraia o valor dos dados 3) Responda diretamente'
        },
        strategic_advice: {
          level: 'RECOMENDA√á√ïES ESTRAT√âGICAS',
          instruction: 'Analise os dados e forne√ßa recomenda√ß√µes acion√°veis. Combine insights dos dados com estrat√©gias pr√°ticas.',
          chainOfThought: '1) Analise os dados atuais 2) Identifique oportunidades e riscos 3) Sugira a√ß√µes espec√≠ficas baseadas nos dados'
        },
        priority_analysis: {
          level: 'AN√ÅLISE DE PRIORIZA√á√ÉO',
          instruction: 'Analise os dados e crie um ranking de prioridades. Use m√©tricas espec√≠ficas para justificar a ordem.',
          chainOfThought: '1) Examine todos os registros 2) Aplique crit√©rios de prioriza√ß√£o 3) Crie ranking com justificativas baseadas nos dados'
        },
        insights_recovery: {
          level: 'INSIGHTS E PROJE√á√ïES',
          instruction: 'Analise os dados para gerar insights sobre potencial de recupera√ß√£o e estimativas futuras.',
          chainOfThought: '1) Analise hist√≥rico e padr√µes 2) Calcule probabilidades baseadas nos dados 3) Projete cen√°rios com base nas evid√™ncias'
        }
      }
      
      const template = templates[detectedIntent as keyof typeof templates] || templates.descriptive_analysis
      
      const directive = `\n\nüî• DADOS REAIS ANEXADOS - USE OBRIGATORIAMENTE üî•\n\n‚ö° N√çVEL DE RESPOSTA: ${template.level}\n\nüéØ INSTRU√á√ÉO ESPEC√çFICA: ${template.instruction}\n\nüß† PROCESSO DE PENSAMENTO: ${template.chainOfThought}\n\nüìä DADOS DE AN√ÅLISE:\n`
      enhancedMessage = `${message}${directive}${JSON.stringify(analysisData, null, 2)}\n\n‚úÖ Use o processo de pensamento acima e analise os dados para responder`
    }

    const messages = [
      { role: 'system', content: systemPrompt },
      ...history.map((msg: any) => ({
        role: msg.role,
        content: msg.content
      })),
      { role: 'user', content: enhancedMessage }
    ]

    // Dynamic temperature based on intent
    const temperatureMap = {
      'descriptive_analysis': 0.05, // Very precise for data analysis
      'specific_data': 0.02, // Extremely precise for exact data
      'strategic_advice': 0.3, // Some creativity for strategies
      'priority_analysis': 0.1, // Precise ranking
      'insights_recovery': 0.2 // Balanced for insights
    }
    
    const temperature = detectedIntent ? temperatureMap[detectedIntent as keyof typeof temperatureMap] || 0.1 : 0.1

    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: messages as any,
      temperature: temperature,
      max_tokens: 1200,
    })

    const responseContent = completion.choices[0]?.message?.content || 'Desculpe, n√£o consegui gerar uma resposta.'

    return NextResponse.json({
      content: responseContent,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Error in chat API:', error)
    
    if (error instanceof Error && error.message.includes('API key')) {
      return NextResponse.json(
        { error: 'Configura√ß√£o da API OpenAI necess√°ria' },
        { status: 500 }
      )
    }

    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}